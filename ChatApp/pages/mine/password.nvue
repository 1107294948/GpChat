<template>
	<view>
		<myp-navbar :lefts="leftIcons" title="修改密码" :rights="rightIcons" leftStyle="width:90rpx;"
			centerStyle="width:460rpx;" @leftAction="navLeftAction" @rightAction="toRightTab"></myp-navbar>
		<myp-list :down="null" :up="null">
			<myp-list-cell>
				<view style="height: 5rpx;"></view>
				<view class="myp-flex-row myp-align-center myp-bg-inverse myp-wrap-nowrap"
					style="padding-left: 30rpx;padding-right: 30rpx;">
					<view class="myp-flex-row myp-align-center myp-border-bottom myp-wrap-nowrap"
						style="width: 690rpx;height: 116rpx;">
						<text class="myp-size-l myp-color-text" style="font-weight: 700;">手机验证码</text>
						<view class="myp-border-bottom myp-flex-row myp-align-center"
							style="height: 66rpx;border-bottom-color: #808080;margin-left: 36rpx;width:250rpx;">
							<input v-model="model.Vcode" class="myp-size-l myp-color-text myp-flex-one" />
						</view>
						<view class="myp-flex-row myp-align-center myp-justify-center"
							style="margin-left: 18rpx;width: 203rpx;height: 66rpx;background-color: #C1C1C1;"
							@click="toRequestCode" :disabled="seconds!=60">
							<text class="myp-size-l myp-color-primary">{{seconds!=60?(seconds+'s'):'发送验证'}}</text>
						</view>
					</view>
				</view>
				<view class="myp-flex-row myp-align-center myp-bg-inverse myp-wrap-nowrap"
					style="padding-left: 30rpx;padding-right: 30rpx;">
					<view class="myp-flex-row myp-align-center myp-border-bottom myp-wrap-nowrap"
						style="height: 116rpx;">
						<text class="myp-size-l myp-color-text" style="font-weight: 700;margin-left: 22rpx;">新密码</text>
						<view class="myp-border-bottom myp-flex-row myp-align-center"
							style="height: 66rpx;border-bottom-color: #808080;margin-left: 36rpx;width: 432rpx;">
							<input v-model="model.PassWord" class="myp-size-l myp-color-text myp-flex-one" />
						</view>
					</view>
				</view>
				<view class="myp-flex-row myp-align-center myp-bg-inverse myp-wrap-nowrap"
					style="padding-left: 30rpx;padding-right: 30rpx;">
					<view class="myp-flex-row myp-align-center myp-wrap-nowrap" style="height: 116rpx;">
						<text class="myp-size-l myp-color-text" style="font-weight: 700;margin-left: 22rpx;">确认密码</text>
						<view class="myp-border-bottom myp-flex-row myp-align-center"
							style="height: 66rpx;border-bottom-color: #808080;margin-left: 20rpx;width: 432rpx;">
							<input v-model="model.ConfirmPassWord" class="myp-size-l myp-color-text myp-flex-one" />
						</view>
					</view>
				</view>
			</myp-list-cell>
		</myp-list>
		<!-- <custom-toast :show="toastVisible" desc="验证码错误"></custom-toast> -->
	</view>
</template>

<script>
	import customToast from './components/customToast.vue'

	import navHelper from '@/service/navHelper.js'
	import toastMixin from '@/mypUI/myp-mixin/toastMixin.js'
	import {
		isNullOrEmpty
	} from '@/mypUI/utils/validate.js'
	import {
		GetUCode,
		UpdatePassWord
	} from '@/api/user/index.js'
	import {
		mapMutations
	} from 'vuex';
	export default {
		components: {
			customToast
		},
		mixins: [navHelper, toastMixin],
		data() {
			return {
				model: {
					PhoneNo: "",
					PassWord: "",
					ConfirmPassWord: "",
					Vcode: ""
				},
				seconds: 60
			}
		},
		computed: {
			...mapMutations({
				"LoginOut": "user/SetLoginOut"
			}),
			rightIcons() {
				var rIcons = [{
					text: '完成',
					textType: 'third'
				}];
				if (!isNullOrEmpty(this.model.PhoneNo) &&
					!isNullOrEmpty(this.model.PassWord) &&
					!isNullOrEmpty(this.model.ConfirmPassWord) &&
					!isNullOrEmpty(this.model.Vcode)) {
					rIcons[0].textType = "primary";
				}
				return rIcons;
			}
		},

		methods: {
			toRightTab(i) {
				if (this.model.PassWord != this.model.PassWord) {
					this.showToastWarning("两次密码不一样");
				} else
					UpdatePassWord(this.model).then(res => {
						if (res.status) {
							this.LoginOut();
							uni.reLaunch({
								url: '../auth/login'
							})
						}
					});
			},
			toRequestCode() {
				GetUCode(this.model.PhoneNo).then(res => {
					if (res.status) {
						this.showToastSuccess('发送成功');
						let interval = setInterval(() => {
							if (this.seconds === 0) {
								this.seconds = 60;
								clearInterval(interval);
							} else
								this.seconds = this.seconds - 1
						}, 1000)
					}
				});
			}
		},
		onLoad() {
			this.model.PhoneNo = this.$store.getters.phone;
		}
	}
</script>

<style>

</style>
